swagger: "2.0"
info:
  description: "This is a password manager server."
  version: "0.0.1"
  title: "Password Manager"
  termsOfService: ""
  contact:
    email: "test@te.st"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: ""
basePath: "/v0"
tags:
- name: "user"
  description: "Creating users, signing in/out"
- name: "accounts"
  description: "Access to accounts stored in the password manager"
- name: "maintenance"
  description: "General information"
schemes:
- "https"
paths:
  /info:
    get:
      tags:
      - "maintenance"
      summary: "get information about the server for the client"
      description: ""
      operationId: "serverInformation"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ServerInformation"
  /user:
    put:
      tags:
      - "user"
      summary: "registration"
      description: ""
      operationId: "registerUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Registration Object"
        required: true
        schema:
          $ref: "#/definitions/RegistrationInformation"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/GenericSuccessMessage"
        405:
          description: "Invalid input"
  /user/login:
    post:
      tags:
      - "user"
      summary: "login"
      description: ""
      operationId: "loginUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Logon Object"
        required: true
        schema:
          $ref: "#/definitions/LogonInformation"
      responses:
        405:
          description: "Invalid input"
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/GenericSuccessMessage"
          headers:
            Set-Cookie:
              schema:
                type: string
                example: SESSIONID=1234567890; Path=/; HttpOnly; Secure; SameSite
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /accounts:
    get:
      tags:
      - "accounts"
      summary: "Returns the accounts stored by the current user"
      description: ""
      operationId: "getAccounts"
      produces:
      - "application/json"
      responses:
        403:
          description: "Unauthorized"
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Accounts"
        400:
          description: "Invalid status value"
    post:
      tags:
      - "accounts"
      summary: "Update a stored account"
      description: ""
      operationId: "updateAccount"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Account Object"
        required: true
        schema:
          $ref: "#/definitions/AccountId"
      produces:
      - "application/json"
      responses:
        403:
          description: "Unauthorized"
        200:
          description: "successful operation"
          schema:
            items:
              $ref: "#/definitions/Accounts"
        400:
          description: "Invalid status value"
    delete:
      tags:
      - "accounts"
      summary: "Delete a stored Account"
      description: ""
      operationId: "deleteAccount"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Account Id"
        required: true
        schema:
          $ref: "#/definitions/Index"
      produces:
      - "application/json"
      responses:
        403:
          description: "Unauthorized"
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Accounts"
        400:
          description: "Invalid status value"
    put:
      tags:
      - "accounts"
      summary: "Add Account"
      description: ""
      operationId: "addAccount"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Account Values"
        required: true
        schema:
          $ref: "#/definitions/Account"
      produces:
      - "application/json"
      responses:
        403:
          description: "Unauthorized"
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Accounts"
        400:
          description: "Invalid status value"
#      security:
#        - pm_auth: []
securityDefinitions:
  petstore_auth:
    type: "apiKey"
    in: header
    name: SESSIONID
definitions:
  RegistrationInformation:
    type: "object"
    allOf:
      - $ref: "#/definitions/LogonInformation"
      - $ref: "#/definitions/UserInformation"
  LogonInformation:
    type: "object"
    properties:
      username:
        type: "string"
      password:
        type: "string"
  UserInformation:
    type: "object"
    properties:
      email:
        type: "string"
  AccountId:
    allOf:
      - $ref: "#/definitions/Index"
      - $ref: "#/definitions/Account"
  Account:
    type: "object"
    properties:
      name:
        type: "string"
      additional:
        type: "string"
      password:
        type: "string"
  Accounts:
    type: "array"
    items:
      $ref: "#/definitions/AccountId"
  Index:
    type: "object"
    properties:
      index:
        type: "integer"
  File:
    type: "object"
    properties:
      index:
        type: "integer"
      name:
        type: "string"
      key:
        type: "string"
  Files:
    type: "array"
    items:
      $ref: "#/definitions/File"
  ServerInformation:
    type: "object"
    properties:
      csrfToken:
        type: "string"
  GenericSuccessMessage:
    type: "object"
    properties:
      status:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Repository"
  url: "http://github.com/zeruniverse/PasswordManager"
